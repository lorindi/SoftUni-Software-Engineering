TypeScript is superset of JavaScript?
ES6 is superset of ES5.
tsc name.file
JavaScript: a dynamic, loosely typed language widely used for web development.
TypeScript е статично типизиран, който надгражда js, но лежи изцяло на него, 
който ни дава допълнително функционалности, тулинги.
*tsc app.ts /tsc && node app.js 

*node -v
*npm install -g typescript (latest stable build)
*tsc -v/ tsc --version => Should return a message 'Version'
 
*tsc --init => This command will create a ne tsconfig.json file:
{
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",                               
    "esModuleInterop": true,
    "rootDir": "./src",        
    "outDir":"./dist",                 
    "skipLibCheck": true      
  }
}
node .\dist\task1.js

* ES6 -> ES5  => Transpile
* TypeScript -> JavaScript => Transpile
* TypeScript -> C++ => Compile

*Процедурно програмиране - наподобява на спагети код:
Процедурното програмиране е парадигма, където програмата се структурира около процедури или функции, 
които изпълняват определени задачи. 
Този подход се фокусира върху последователността на операциите и използва подпрограми за организацията и повторната употреба на код.

Класовете са шаблон за създаване на обекти.


Принципи на OOP:

OOP - управление на методи и пропъртита => 
Обектно-ориентираното програмиране (ООП) се базира на концепции като класове, обекти, методи и пропъртита. 
В тази парадигма данните и функциите, които работят с тях, се обединя ват в обекти.

Енкапсулация - група от пропъртита/променливи и група от функции/методи, които са обединени по смисъл. 
Успява да групира функции и променливи под някакъв смисъл, обект,клас който да ги контролира и через който могат да бъдат достъпвани.

Абстракция е когато имаме скрити функционалности - детайли и са видими само най важните.
Абстакцията са всички детайли от които имаме нужда за да се случи функционалността в нашият софтуер.

Inheritance-Наследяването (Inheritance) в програмирането е концепция,  
която позволява на нов клас (наследник) да наследи характеристики и функционалност от друг клас (родител). 
Това означава, че наследникът може да използва методи и полета, дефинирани в родителския клас, без да ги пренаписва.
С extends - се наследяват други класове, а с implements се наследяват интерфейси. Могат да се наследят и двете едновременно

В TypeScript ключовата дума implements се използва за налагане на специфични интерфейси в класовете. 
Когато един клас имплементира интерфейс, той обещава да реализира всички методи и свойства, дефинирани в този интерфейс.
 

SOLID е акроним, който представлява пет основни принципа на обектно-ориентираното програмиране и дизайн.
 Тези принципи са формулирани с цел подобряване на разширяемостта, поддържаемостта и преизползваемостта на софтуерния код.
  Ето какво означават отделните букви:

S - Single Responsibility Principle (Принцип на единствената отговорност):
Този принцип посочва, че един клас трябва да има само една причина за промяна.
 Това означава, че един клас трябва да се грижи само за една конкретна част от функционалността и бизнес логиката на приложението.
O - Open/Closed Principle (Принцип на отворено/затворено):
Според този принцип, софтуерните съставни части, като класове, модули и функции, трябва да бъдат отворени за разширение,
 но затворени за промяна. Това означава, че трябва да можем да добавяме нова функционалност към системата,
  без да променяме съществуващия код.
L - Liskov Substitution Principle (Принцип на заместването на Лисков):
Принципът посочва, че обекти от суперкласа трябва да могат да бъдат заместени с обекти на подкласа без да се нарушава 
коректността на програмата. Това означава, че подкласовете трябва да са способни да заместят родителския клас
 без да променят очакваното поведение.
I - Interface Segregation Principle (Принцип на сегрегацията на интерфейсите):
Принципът гласи, че е по-добре да има много по-специфични интерфейси, отколкото един голям и общ интерфейс.
 Това означава, че клиентите не следва да бъдат принуждавани да зависят от интерфейси, които не използват.
D - Dependency Inversion Principle (Принцип на инверсията на зависимостта):
Принципът препоръчва, че високо ниво модули не бива да зависят от ниско ниво модули, а и двете категории бива да зависят от абстракции.
 Освен това, абстракциите не бива да зависят от детайлите, а детайлите бива да зависят от абстракциите.
Използването на тези принципи в дизайна и импл ементацията на софтуер може да доведе до по-чист,
 по-модулен и по-лесно разширяем код, който е по-лесен за поддръжка и преизползване.

Workshop:
workshop => *npm create vite@latest => Vanilla => TypeScript
*npm i
*npm run dev
*npm run build 
https://jsonplaceholder.typicode.com/users