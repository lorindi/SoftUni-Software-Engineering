Table Relations
Entites - Стъпки в DB Design

1.1 Дефиниране на обекти

Всяка таблица представлява обект
1.2 Създаване на колони

1.3 Дефиниране на PK

ID-тата са INT или STRING
По-сигурно е да са стрингове, защото по-трудно се разбиват с brute force
Ако нещо е PK, то то вече е Unique
1.4 Дефиниране на релации - Many To One - Many To Many - постигаме чрез junction/mapping table - One To One

1.5 Дефиниране на ограничения - CONSTRAINTS

1.6 Попълване с тестови данни

Cascade delete

Изтривайки един запис, свързан с други записи посредством релация, изтриваме всички записи.

Използваме, когато искаме да запазим консистентност на данните

Не го използваме, когато искаме да запазим някаква история или логове.

Good to keep in mind:

*Композитен ключ е ключ създаден от условие пример concat(f_name, l_name)



INNER JOIN (или просто JOIN): Извлича редове от двете таблици, които отговарят на условието 
за съвпадение между тях. Това е най-често използваният вид JOIN.

Пример:

SELECT *
FROM table1
INNER JOIN table2 ON table1.column = table2.column;

LEFT JOIN (или LEFT OUTER JOIN): Връща всички редове от лявата таблица (първата в списъка) 
и съответните съвпадащи редове от дясната таблица. Ако няма съвпадение, върнатите стойности 
от дясната таблица са NULL.

Пример:

SELECT *
FROM table1
LEFT JOIN table2 ON table1.column = table2.column;

RIGHT JOIN (или RIGHT OUTER JOIN): Връща всички редове от дясната таблица (втората в списъка) 
и съответните съвпадащи редове от лявата таблица. Ако няма съвпадение, върнатите стойности от
 лявата таблица са NULL.

Пример:

SELECT *
FROM table1
RIGHT JOIN table2 ON table1.column = table2.column;

FULL JOIN (или FULL OUTER JOIN): Връща всички редове от и двете таблици, като стойностите, 
които не съвпадат, са NULL.

Пример:

SELECT *
FROM table1

FULL JOIN table2 ON table1.column = table2.column;
CROSS JOIN: Генерира комбинация от всички редове от първата таблица с всички редове от втората таблица. Този вид JOIN не използва условие за съвпадение.

Пример:

SELECT *
FROM table1
CROSS JOIN table2;

Тези са основните видове JOIN оператори в PostgreSQL, като можете да комбинирате тези оператори
 и да използвате различни условия за съвпадение, за да получите желания резултат.





 INNER JOIN: Съединява редове от двете таблици, които отговарят на условието за съвпадение. 
Връща общата част между тях.

Пример:

SELECT *
FROM table1
INNER JOIN table2 ON table1.column = table2.column;

LEFT JOIN (или LEFT OUTER JOIN): Връща всички редове от лявата таблица (първата в списъка) 
и съответните съвпадащи редове от дясната таблица. Ако няма съвпадение, върнатите стойности 
от дясната таблица са NULL.

Пример:

SELECT *
FROM table1
LEFT JOIN table2 ON table1.column = table2.column;

RIGHT JOIN (или RIGHT OUTER JOIN): Връща всички редове от дясната таблица (втората в списъка) 
и съответните съвпадащи редове от лявата таблица. Ако няма съвпадение, върнатите стойности от 
лявата таблица са NULL.

Пример:

SELECT *
FROM table1
RIGHT JOIN table2 ON table1.column = table2.column;

Така че, LEFT JOIN взема всичко от лявата таблица и добавя съответните съвпадащи редове от 
дясната таблица, като при липса на съвпадение за дясната таблица връща NULL стойности.
 RIGHT JOIN е обратното - взема всичко от дясната таблица и добавя съответните съвпадащи 
 редове от лявата таблица, като при липса на съвпадение за лявата таблица връща NULL стойности.