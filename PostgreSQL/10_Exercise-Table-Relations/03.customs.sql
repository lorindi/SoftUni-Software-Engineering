CREATE TABLE IF NOT EXISTS passports (
    id INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 100 INCREMENT 1) PRIMARY KEY,
    nationality VARCHAR(50) 
);

INSERT INTO
    passports(nationality)
VALUES
    ('N34FG21B'),
    ('K65LO4R7'),
    ('ZE657QP2');

CREATE TABLE people (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    salary DECIMAL(10, 2),
    passport_id INT,

    CONSTRAINT fk_people_passports
    FOREIGN KEY (passport_id)
    REFERENCES passports(id)
);
INSERT INTO 
    people(first_name, salary, passport_id)
VALUES
    ('Roberto', 43300.0000, 101),
    ('Tom', 56100.0000, 102),
    ('Yana', 60200.0000, 100);





-- id INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 100 INCREMENT 1) PRIMARY KEY,

-- Този ред в SQL дефинира колоната "id" в таблицата "passports" и използва GENERATED ALWAYS AS IDENTITY
--  за автоматично генериране на уникални стойности за тази колона. Да разгледаме параметрите подробно:
-- INTEGER: Типът на данните за тази колона е цяло число.
-- GENERATED ALWAYS AS IDENTITY: Този фрагмент указва, че стойностите за "id" се генерират автоматично
--  от системата. "ALWAYS" означава, че стойността се генерира винаги, дори ако при въвеждане на данни 
--  не се предостави конкретна стойност за тази колона.
-- START WITH 100: Указва, че генерираните стойности ще започнат от 100.
-- INCREMENT 1: Указва, че следващата генерирана стойност ще бъде увеличена с 1 спрямо предходната.
-- PRIMARY KEY: Тази колона също е зададена като основен ключ, което означава, че стойностите в тази
--  колона трябва да бъдат уникални и не могат да бъдат null (празни).
-- Общо взето, този ред дефинира "id" като уникална колона с автоматично увеличаващи се целочислени стойности, 
-- започващи от 100.






-- Този код създава две таблиците в база данни - "passports" и "people", и установява 
-- връзка между тях чрез външен ключ. Да разгледаме го по-подробно:

-- CREATE TABLE IF NOT EXISTS passports: Тази команда създава таблицата "passports",
--  ако не съществува. Таблицата има две колони:

-- id: Цялочислен тип данни, който се генерира автоматично като идентификационен номер за всеки паспорт. 
-- Започва от 100 и се увеличава със стъпка 1.
-- nationality: Символен низ с максимална дължина от 50 символа, представляващ националността на човека.
-- INSERT INTO passports(nationality) VALUES ('N34FG21B'), ('K65LO4R7'), ('ZE657QP2');: Тази команда добавя 
-- три записа в таблицата "passports", със зададените националности.

-- CREATE TABLE people: Тази команда създава таблицата "people". Таблицата има следните колони:

-- id: Автоматично генериран идентификационен номер за всеки човек.
-- first_name: Символен низ с максимална дължина от 50 символа, представляващ първото име на човека.
-- salary: Десетично число с общ брой цифри 10, от които 2 са след десетичната запетая, представляващо заплатата на човека.
-- passport_id: Цяло число, което е външен ключ, свързан с "id" в таблицата "passports".
-- CONSTRAINT fk_people_passports FOREIGN KEY (passport_id) REFERENCES passports(id): Това установява външен ключ за колоната 
-- "passport_id" в таблицата "people", който указва, че стойностите в тази колона трябва да съответстват на стойностите в колоната "id" на таблицата "passports".

-- INSERT INTO people(first_name, salary, passport_id) VALUES ('Roberto', 43300.0000, 101), ('Tom', 56100.0000, 102), ('Yana', 60200.0000, 100);
-- : Тази команда добавя три записа в таблицата "people" със зададените стойности за първо име, заплата и идентификационен номер на паспорта.

-- Общо взето, кодът създава две таблиците, свързани чрез външен ключ, и добавя записи в тях. Таблицата "passports" съхранява информация за
--  паспортите, а таблицата "people" - за хората, като използва връзка между тях.