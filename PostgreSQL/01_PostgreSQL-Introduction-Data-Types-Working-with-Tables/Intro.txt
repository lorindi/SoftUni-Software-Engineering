Данните се събират и съхраняват, те са история, която пазим, за да използваме, когато ни потрябват.
be взима данни от базата данни или ги предостава към fe, след това fe ги връща. 

(шега)
Първите база данни датират от 1912 година, измислена в село Злокучене в една местна кръчма, собственикът направил таблица за да записва натрупаните сметки на клиентите си.


Какво е PostgreSQL - обектна релационна база данни, релационна защото работи с таблици.
PostgreSQL е на 4то място, тя е много гъвкава, сигурна, работи бързно и надеждно.
PostgreSQL се справя с едновремено много заявки.



Езикът SQL е императивен.
Релационните база данни са в табличен вид.
SQL (Structured Query Language) е стандартизиран език за управление на релационни бази данни (RDBMS). 
Този език се използва за дефиниране и манипулиране на данни в релационни бази данни, като например Microsoft SQL Server, MySQL, PostgreSQL, Oracle и други.
Основните категории операции в SQL включват:
DDL (Data Definition Language): Този поднабор от SQL се използва за дефиниране на структурата на базата данни. 
Тук влизат операции като CREATE (за създаване на обекти като таблица, индекс и др.), ALTER (за промяна на структурата) и DROP (за изтриване на обекти).
Пример:
sql
Copy code
CREATE TABLE my_table (
    id INT PRIMARY KEY,
    name VARCHAR(255)
);
DML (Data Manipulation Language): Този поднабор се използва за манипулиране на данни в базата данни. 
Операции като SELECT (за извличане на данни), INSERT (за вмъкване на нови данни), UPDATE (за обновяване на съществуващи данни) и DELETE (за изтриване на данни) са често срещани.
Пример:
sql
Copy code
INSERT INTO my_table (id, name) VALUES (1, 'John');
DCL (Data Control Language): Този поднабор се използва за управление на правата на достъп и сигурността на базата данни. 
Операции като GRANT (за предоставяне на права) и REVOKE (за отнемане на права) са част от DCL.
Пример:
sql
Copy code
GRANT SELECT ON my_table TO user1;
SQL е широко използван и поддържан стандарт за работа с релационни бази данни и е от съществено значение за разработка и 
управление на данни във множество приложения и системи.




Нерелационните бази данни (NoSQL) представляват вид бази данни, които се различават от традиционните релационни бази данни (RDBMS), за които се използва SQL (Structured Query Language). 
Тези системи са проектирани да отговарят на определени предизвикателства и изисквания, които могат да възникнат при работа с големи обеми от данни или в ситуации, където структурата на данните е променлива или трудно определима предварително. 
Вотът на NoSQL базите данни обикновено включва следните категории:
Документални бази данни (Document-oriented databases): Тези бази данни съхраняват данните във формат, подобен на JSON или BSON (бинарна форма на JSON). 
Всеки документ може да съдържа различни полета с различни типове данни. Пример за документална база данни е MongoDB.
Ключ-стойностни бази данни (Key-value stores): Данните се съхраняват като ключ-стойност двойки. 
Този модел е много ефективен за бързо съхранение и извличане на данни, но не предоставя сложни връзки между тях. Примери включват Redis и Amazon DynamoDB.
Колонни бази данни (Column-family stores): Данните се съхраняват като колекции от колони, а не редове, както е при релационните бази данни. 
Този модел е подходящ за приложения, където се работи с големи количества данни с различни структури. Примери включват Apache Cassandra и HBase.
Графови бази данни (Graph databases): Тези бази данни са специализирани в съхранение и обработка на графове, като използват върхове, ръбове и свойства. 
Те са полезни при анализа на връзките между данните. 
Пример за графова база данни е Neo4j.
Изборът на подходящ тип NoSQL база данни зависи от конкретните изисквания на проекта, включително характеристиките на данните, скоростта на достъп, мащабируемостта и сложността на връзките между данните. 
В зависимост от конкретните случаи, организациите често комбинират различни типове бази данни в техните архитектури.






pgAdmin е графичен административен клиент за управление на PostgreSQL бази данни. 
PostgreSQL е мощна обектно-реляционна система за управление на бази данни (ORDBMS), която поддържа множество функции и е отворен код.
pgAdmin предоставя потребителски интерфейс, който улеснява администрирането и мониторинга на PostgreSQL сървъри. 
С него може да се извършват различни задачи, като създаване и управление на бази данни, таблиците в тях, потребители и техните права, изпълнение на SQL заявки и още много.
pgAdmin е наличен за различни операционни системи, включително Windows, macOS и различни дистрибуции на Linux. 
Предоставя се както като standalone приложение, така и като уеб-базиран клиент. 
Интерфейсът му предлага множество възможности за управление и администрация на PostgreSQL бази данни, което го прави полезен инструмент за разработчици и администратори на бази данни.




Docker е като шкафче с органайзери.
Docker е платформа за контейнеризация, която позволява разработчиците да опаковат приложенията си и техните зависимости, заедно с цялата необходима конфигурация, в контейнер. 
Контейнерите са портативни и изолирани от средата, което прави лесно преносими и повторно използваеми.
Основните концепции в Docker включват:
Контейнери: Docker използва контейнери за опаковане на приложения и техните зависимости. 
Контейнерите предоставят изолация и осигуряват, че приложението ще работи по един и същ начин, независимо от средата, в която се изпълнява.
Docker образи: Образите са шаблони за контейнери, които включват приложението и всички негови зависимости. 
Те се използват за създаване на контейнери.
Dockerfile: Dockerfile е текстов файл, който съдържа инструкции за създаване на Docker образ. 
Този файл описва стъпките, необходими за инсталиране на софтуер и конфигуриране на контейнера.
Docker Hub: Docker Hub е централизиран регистър, където потребителите могат да споделят и изтеглят готови Docker образи.
Docker предоставя лесен начин за създаване, разпространение и използване на контейнери, което улеснява разработката, доставката и управлението на приложенията. 
Той се използва широко в съвременната разработка на софтуер и инфраструктура, където се изисква бърза и лесна управляемост на приложенията.





Schema - е нещото, което се грижи къде да сложи данните.
В контекста на базите данни, терминът "схема" (schema) се използва за организацията или структурата на базата данни. 
Схемата дефинира начина, по който данните са структурирани и какви връзки между тях съществуват. 
Всъщност, схемата дефинира структурата и ограниченията на базата данни.
Една база данни може да съдържа множество схеми, като всяка схема обикновено съдържа таблиците, изгледите, индексите, тригерите и други обекти, които са свързани с нея. 
Схемите помагат за организацията на данните и позволяват на различни потребители или приложения да имат различен достъп до различни части от базата данни.
Примери за използване на схеми в SQL база данни (например, в PostgreSQL, MySQL, SQL Server и други) включват създаване на таблица в определена схема:

sql
Copy code
CREATE TABLE my_schema.my_table (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255)
);
Тук my_schema е името на схемата, а my_table е името на таблицата. 
Когато се правят заявки, трябва да се посочи схемата, за да се отбележи точното място, където се намират данните.
Схемите играят важна роля в управлението на базите данни и предоставят организация и структура в данните, които се съхраняват в тях.





В контекста на управлението на бази данни, тези четири типа команди са част от SQL (Structured Query Language) и служат за различни аспекти от работата с данни и структурата на базата данни. Вотът на командите включва:
DDL (Data Definition Language) - Език за дефиниция на данни:
CREATE: Създава нови обекти в базата данни, като таблица, индекс или изглед.
ALTER: Променя структурата на съществуващи обекти в базата данни, като добавя, променя или изтрива колони от таблица.
DROP: Изтрива обекти от базата данни, като таблица, индекс или изглед.
Пример за DDL команда:

sql
Copy code
CREATE TABLE my_table (
    id INT PRIMARY KEY,
    name VARCHAR(255)
);
DML (Data Manipulation Language) - Език за манипулиране на данни:
SELECT: Извлича данни от една или няколко таблицi.
INSERT: Вмъква нови записи в таблица.
UPDATE: Обновява съществуващи записи в таблица.
DELETE: Изтрива записи от таблица.
Пример за DML команда:

sql
Copy code
INSERT INTO my_table (id, name) VALUES (1, 'John');
DCL (Data Control Language) - Език за контрол на данни:
GRANT: Предоставя права за достъп до определени обекти на определени потребители или роли.
REVOKE: Отнема предоставени права за достъп.
Пример за DCL команда:

sql
Copy code
GRANT SELECT ON my_table TO user1;
TCL (Transaction Control Language) - Език за управление на транзакции:
COMMIT: Завършва текущата транзакция, като записва промените в базата данни.
ROLLBACK: Отмята текущата транзакция, връщайки базата данни към предходното състояние.
SAVEPOINT: Задава точка, до която може да се върне транзакцията с ROLLBACK.
Пример за TCL команда:

sql
Copy code
COMMIT;
Тези типове команди образуват основата на SQL и се използват в различни комбинации за управление на данните и структурата на базите данни.





Цели числа (Integer): Съхраняват цели числа без десетична точка. Пример: 1, -5, 1000.
Реални числа (Floating-point): Съхраняват числа с десетична точка. Пример: 3.14, -0.001, 2.0.
Низове (String): Съхраняват текстови данни. Пример: "Hello, World!", '123'.
Символен низ (Character): Съхранява единичен символ. Пример: 'A', '1', '*'.
Булев тип (Boolean): Съхранява стойности True или False.
Дата и време (Date/Time): Съхраняват информация за дата и/или време. Пример: 2023-12-15, 14:30:00.
Бинарни данни (Binary): Съхраняват двоични данни, като например изображения или файлове.
NULL: Съхранява стойност "нищо" или "неопределено". Обикновено се използва, когато не е налична конкретна стойност.
Масиви (Arrays): Групират последователност от стойности от един и същ тип. Например, масив от цели числа [1, 2, 3].
Обекти (Objects): Комплексен тип данни, който може да съдържа различни полета с различни типове данни.
UUID (Universally Unique Identifier): Уникален идентификатор, който се използва за уникално идентифициране на обекти.
Географски данни (Geospatial): Съхраняват информация за географско местоположение, като координати (широта и дължина).





В SQL, типовете данни, които предоставят поддръжка за числови стойности с десетична точка, често се наричат "numeric" или "decimal" типове. 
Тези типове са подходящи за съхранение на числа с фиксирана или променлива десетична точка. 
Поддържаните типове и техните характеристики могат да варират в зависимост от конкретната SQL база данни. Ето някои общи numeric типове:
DECIMAL(p, s) или NUMERIC(p, s): Тези типове предоставят числа с фиксирана десетична точка, където p е общият брой цифри (цифри преди и след десетичната точка), а s е броят цифри след десетичната точка.
Пример:
sql
Copy code
DECIMAL(10, 2) -- число с общо 10 цифри (преди и след десетичната точка), от които 2 са след десетичната точка.
FLOAT(p): Този тип предоставя числа с плаваща запетая, където p е броят битове за представяне на числото. 
Не гарантира точност, но предоставя по-голяма гъвкавост в сравнение с DECIMAL.

Пример:
sql
Copy code
FLOAT(8) -- число с плаваща запетая с 8 бита за представяне.
DOUBLE PRECISION: Този тип предоставя двойна точност за числа с плаваща запетая.

Пример:
sql
Copy code
DOUBLE PRECISION -- двойна точност за числа с плаваща запетая.
Винаги е важно да проверявате документацията на конкретната SQL база данни, която използвате, за да разберете детайлите и ограниченията на numeric типовете, които тя предлага.





Създаваме нова база данни, след което създаваме нова таблица.
Създаваме колони (задължително ни трябва уникален идефикатор - id)
Колони:
first_name | character varying | 10
last_name | character varying | 10
age | integer | 10
id | integer | 10 | primery key |

primery key - уникален индефикатор
Ако в базата данни се опитаме да създадем човек с същото id като на друг, базата данни ще ни предостави грешка.







Сега вече ще създадем база данни с команда:
1.Създаване на база данни => CREATE DATABASE database_name;
Таблица е с найменование employees, например:
CREATE TABLE
    employees(
        id serial PRIMARY KEY NOT NULL,
        first_name VARCHAR(30),
        last_name VARCHAR(50),
        hiring_date DEFAULT '2023-01-01',
        salary NUMERIC(10, 2),
        devices_number int
    );
    CREATE TABLE
        departments(
            id serial PRIMARY KEY NOT NULL,
            "name" VARCHAR(50),
            code char(3),
            description text,
        );

    CREATE TABLE
        issues(
            id serial PRIMARY KEY NOT UNIQUE,
            description VARCHAR(150),
            "date" date,
            start timestamp
        );


2. Добавяне на нова колона в таблицата:
ALTER TABLE employees
ADD COLUMN middle_name VARCHAR(50)

Направи го от 50 на 100
ALTER TABLE employees
ADD COLUMN middle_name TYPE VARCHAR(100)

Направи го като текст:
ALTER TABLE employees
ADD COLUMN middle_name TYPE text::


3. Прейменуване на таблицата:
ALTER TABLE employees
RENAME TO employee

4.
ALTER TABLE employees
ALTER COLUMN salary SET not default null,
ALTER COLUMN salary SET default 0,
ALTER COLUMN hiring_date SET not null;

5. Изтрии на данните в таблцицата issues, но колоната не се изстрива
TRUNCATE TABLE issues;


6.Изтриване на цялата колона и нейните данни:
DROP TABLE departments


7.id винаги ще е уникално и ще се генерира само.
CREATE TABLE people (
id int PRIMARY KEY generated ALWAYS as identity,
first_name VARCHAR(30),
last_name VARCHAR(30)
)