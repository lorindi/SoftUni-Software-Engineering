В SQL, ключовата дума DISTINCT се използва в командата SELECT, 
за да се изберат уникални стойности от определена колона или 
комбинация от колони в резултатите на заявката. 
Когато използвате DISTINCT, резултатите ще включват само 
уникални стойности за посочените колони, премахвайки всички повторения.

SELECT 
    DISTINCT country
FROM employees



Ключовата дума GROUP BY в SQL се използва в командата SELECT, за да групира 
резултатите по стойности в определена колона или колони. Когато използвате 
GROUP BY, резултатите се групират спрямо уникалните стойности в посочената 
колона или колони. След това можете да прилагате агрегатни функции 
(като COUNT, SUM, AVG и други) към всяка група.
В случая със заявката, която сте предоставили:

SELECT 
    country
FROM 
    employees
GROUP BY 
    country

Тази заявка ще върне уникални стойности от колоната "country" от таблицата 
"employees", като групира резултатите по държави. За всяка уникална държава 
ще получите един ред в резултатите. Това е полезно, когато искате да видите 
агрегирани данни за всяка група, например общ брой служители от всяка държава.



Показва средната стойност - заплата за дадена държава.
SELECT 
    country,
    AVG(salary)
FROM 
    employees
GROUP BY 
    country



Показва максималната стойност - заплата за дадена държава.
SELECT 
    country,
    MAX(salary)
FROM 
    employees
GROUP BY 
    country



Показва минималната стойност - заплата за дадена държава.
SELECT 
    country,
    MIN(salary)
FROM 
    employees
GROUP BY 
    country


Пребоява всички редове в таблицата.
SELECT 
    count(*)
FROM 
    employees;



Пребоява всички редове в колоната country, ако те са различни от NULL.
SELECT 
    count(country)
FROM 
    employees;







CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50)
);

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES departments(department_id)
);
В горния пример таблицата "employees" съдържа външен ключ (foreign key) "department_id", 
който е свързан с полето "department_id" от таблицата "departments". Така се установява 
връзка между таблици чрез обща колона.

SELECT employees.employee_id, employees.employee_name, departments.department_name
FROM employees
JOIN departments ON employees.department_id = departments.department_id;

Този SELECT ще върне информация за служителите и техните отделения, използвайки външния 
ключ за свързване на двата записа. Важно е да отбележите, че външният ключ обикновено 
е дефиниран при създаването на таблицата и служи за поддържане на цялост на данните 
чрез определени връзки между таблиците в базата данни.





"One-to-Many" (един към много), "Many-to-Many" (много към много) и "One-to-One" (един към един
са типове връзки между записите в релационни бази данни. Тези термини описват, колко записи от 
една таблица могат да са свързани с запис от друга таблица. Вотът е кратко обяснение за всяка 
от тези връзки:

One-to-Many (един към много):

Този тип връзка се характеризира с това, че един запис от една таблица може да бъде свързан с 
множество записи от друга таблица, но обратното не е вярно.
Например, една фирма може да има множество служители, но всеки служител е асоцииран с една 
единствена фирма.

Many-to-Many (много към много):

Този вид връзка позволява множество записи от една таблица да са свързани с множество записи от друга таблица.
За да се реализира много към много връзка, често се използва допълнителна (промежуточна) таблица, 
която съдържа външни ключове, свързващи главните таблиците.
Пример би бил моделът с книги и автори: една книга може да има множество автори, и обратно.

One-to-One (един към един):

Този тип връзка представлява ситуация, в която един запис от една таблица е свързан точно с един 
запис от друга таблица и обратното.
Този вид връзка се използва, когато има стриктно едно към едно съответствие между записите.
Например, може да съществува таблица с данни за часовници и таблица с данни за гаранциите 
към тези часовници, където всеки часовник има точно една гаранция.
Тези типове връзки играят важна роля при проектирането на бази данни и определят начина, 
по който информацията е организирана и взаимодейства между различните таблици.




FR винаги сочи към PK



SELECT
    CONCAT(m.first_name, m.last_name),
    men_id,
    women_id,
    CONCAT(w.first_name, w.last_name)
FROM men AS m JOIN men_women
    ON n.id = men_women.men_id
        JOIN women as w
            ON men_women.women_id = w.id;