Stack - се подреждат неща, които се изпълняват в момента, а в опашкато стоят отговорите от процесите, които event loop ще ги вкара за изпълнение, когато е свободен стека.
Modules - има 2 вида модули: ES6 / NodeJs - CommonJs Modules

this === window - в браузъра
this === global в терминала
globalThis === global

3-вида модули => Core, Local, Third-Party

node -v => Проверява коя е текущата версия.
Ако напишем js code в txt, когато отворим терминал на текущатата папка в която се намира txt,можем да го пуснем с командата => node .\script.txt
Ctrl + J => Terminal

JavaScript => Node.js => V8/libuv

Node.js - runtime, среда в която се изпълнява кодът.
Създаден през 2009г.
Организирана памент - stack - box
Node.js е отворена сървърна среда, базирана на JavaScript, която позволява на разработчиците да създават скоростни и мащабируеми мрежови приложения. 
Той използва движок V8 на Google Chrome за изпълнение на JavaScript код на сървърната страна, 
като така позволява на програмистите да изграждат пълни приложения само с един език - JavaScript.

Node.js е изключително популярен за създаване на уеб приложения, особено за реално време приложения като чат приложения, игри, социални мрежи и др. 
Той също така се използва за създаване на различни инструменти и приложения на сървърната страна, като например уеб сървъри, API, микроуслуги и др.

Node.js е известен със своя мащабируемост и ефективност, като позволява на приложенията да обслужват големи натоварвания с малък брой ресурси. 
Той също така е активно поддържан от голяма общност от разработчици и има богата екосистема от модули и инструменти, които улесняват разработката.


Event Loop - libuv => асинхронни операции
Event лууп се пълнят в опашка
Event Loop (събитиен цикъл) е централен механизъм в Node.js, който управлява асинхронната операции и обработва събитията във входно-изходния цикъл на приложението. 
Той играе ключова роля във възможността на Node.js да обработва голям брой входящи заявки ефективно и да се справя със събития на сървърното ниво.

Ето основните принципи на работа на Event Loop в Node.js:

Очакване на събития (Event Queue): Event Loop постоянно проследява опашката от събития (event queue), като възпроизвежда дадено събитие, 
когато възникне входящо събитие или завърши асинхронна операция.

Неблокиращо изпълнение (Non-blocking): Node.js използва асинхронно програмиране, което позволява на кода да продължи изпълнението си, 
докато се изчаква завършването на асинхронна операция. Това позволява на Node.js да работи ефективно и да не блокира основния си 
процес по време на изпълнението на дълги операции като I/O заявки.

Използване на Callbacks (Обратни повиквания): Event Loop използва обратни повиквания (callbacks), за да уведоми приложението, 
когато е завършила асинхронна операция. Когато операцията приключи, Node.js добавя съответния обратен повиквач в опашката за събития (Event Queue), 
която по-късно ще бъде изпълнена от Event Loop.

Ефективно използване на единичен процесорен поток: Event Loop позволява на Node.js да използва един процесорен поток ефективно, 
като избягва блокирането на изпълнението му по време на изчакването на завършването на асинхронни операции.

Съществуват и разширения на този принцип, като например Worker Threads в Node.js, които позволяват на приложението да използва множество процесорни 
потоци за обработка на задачи паралелно.



В Node.js, модулите са основна концепция, която позволява на разработчиците да организират и структурират техния код. 
Модулите са независими части от код, които съдържат функции, променливи, класове или друга логика, която може да бъде повторно използвана.

Ето някои основни аспекти на модулите в Node.js:

require() и module.exports (или exports): В Node.js, модулите се зареждат и включват в други файлове с помощта на функцията require(). 
За да изнасяте функции, променливи или обекти от модул, използвайте module.exports или exports.

Пример:

// math.js
function add(a, b) {
    return a + b;
}

module.exports = {
    add: add
};
В друг файл:

const math = require('./math.js');
console.log(math.add(2, 3)); // Output: 5
Вградени модули: Node.js предоставя набор от вградени модули, които могат да бъдат използвани без инсталиране. Някои от тези модули включват fs (за файлова система), 
http (за HTTP сървъри), path (за работа с пътища във файловата система), и други.

Инсталирани модули с npm (Node Package Manager): Разработчиците могат да използват npm за инсталиране на външни модули, които са налични в npm репозиторито. 
Това дава възможност за използване на различни библиотеки и инструменти, които са на разположение за Node.js.

ES6 модули: Със съвременните версии на Node.js, съществува възможност за използване на ES6 модули с ключовите думи import и export,
 в допълнение към по-стария синтаксис с require() и module.exports.

Пример:

// math.js
export function add(a, b) {
    return a + b;
}
В друг файл:

import { add } from './math.js';
console.log(add(2, 3)); // Output: 5
Модулите в Node.js са ключова част от екосистемата на Node.js и позволяват на разработчиците да пишат по-организиран и мащабируем код.



В Node.js може да създадете уеб сървър по много начини. Един от най-популярните начини е чрез използването на вградения модул http.

Ето пример как може да създадете базов уеб сървър в Node.js:

const http = require('http');

// Създайте сървър
const server = http.createServer((req, res) => {
  // Задайте HTTP заглавия за отговора
  res.writeHead(200, {'Content-Type': 'text/plain'});

  // Изпратете отговора "Hello, World!"
  res.end('Hello, World!\n');
});

// Задайте порт, на който да слуша сървъра
const port = 3000;
server.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});

Този код създава уеб сървър, който слуша на порт 3000 и връща отговор "Hello, World!" на всички HTTP заявки. Можете да тествате сървъра,
 като отворите вашия браузър и посетите http://localhost:3000/.

Разбира се, този пример е много прост и необработва различни видове заявки или състояния. За по-сложни уеб приложения,
може да е необходимо да използвате допълнителни модули или библиотеки като Express.js, Koa.js и други, които предоставят
 по-удобни и мощни инструменти за създаване на уеб сървъри в Node.js.



 За да улесните обработката на HTTP заявки и отговори във вашия Node.js уеб сървър, може да използвате wrapper модули или библиотеки, 
 които предоставят по-удобни методи за манипулиране на заявките и отговорите. Един от най-популярните модули за това е Express.js.

Express.js е минималистичен уеб фреймуърк за Node.js, който предоставя много удобни методи и функционалности за създаване на уеб сървъри и обработка на HTTP заявки и отговори. 
Той включва wrapper модули за обработка на заявките и отговорите, които правят кода ви по-четим и по-лесен за поддръжка.

Ето пример как може да се използва Express.js за създаване на същия уеб сървър като предишния пример, но с използване на request и response wrapper:

const express = require('express');
const app = express();

// Обработване на HTTP GET заявки към корена на уеб сървъра
app.get('/', (req, res) => {
  // Изпращане на отговор "Hello, World!" като текст
  res.send('Hello, World!');
});

// Задаване на порт, на който да слуша сървъра
const port = 3000;
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}/`);
});
Save to grepper
Този код използва Express.js, за да създаде уеб сървър, който слуша на порт 3000 и отговаря на HTTP GET заявки към корена на сървъра с отговор "Hello, World!". 
Express.js автоматично обработва request и response обекти и предоставя удобен синтаксис за работа с тях.