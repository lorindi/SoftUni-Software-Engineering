*ng add @angular/material
*ng g m core
*ng g m shared
*ng g c shared/spinner
*ng g c shared/global-loader
*ng g m user
*ng g c user/user-list
*ng g s user/user
*ng g s core/global-loader
*ng g c core/global-loader
*ng g m todo
*ng g c shared/error-page

https://loading.io/css/
https://jsonplaceholder.typicode.com/users


NgModule в Angular е съкращение за "Angular Module" (ангуляр модул). Това е строителен блок на всяко приложение, което се разработва с Angular. 
Модулите в Angular са контейнери за компоненти, услуги (services), директиви и други функции, които приложението използва.

Когато създаваш Angular приложение, обикновено започваш с поне един модул, наречен основен модул или "root module". Този модул обикновено се нарича AppModule. 
Той съдържа основните компоненти и настройки на приложението, като например селектора на кореновия компонент, което е това, което Angular използва, 
за да започне рендирането на приложението.

По същество, NgModule декларира група компоненти, услуги и директиви, които са логически свързани и могат да се използват заедно. 
Те предоставят начин за организиране на кода и управление на зависимостите между различните части на приложението.



NgModule в Angular е основен строителен блок на приложението. Той се използва за деклариране на модули в приложението, които групират свързаната функционалност заедно.

В един NgModule можете да декларирате компоненти, директиви и канали, които са свързани и имат обща функционалност.
 Това позволява на Angular да организира кода на приложението на по-структуриран начин и да улесни разработката и поддръжката на големи приложения.

Един NgModule може да има следните ключови свойства:

declarations: Списък с компонентите, директивите и каналите, които са декларирани в този модул.
imports: Списък с други модули, които се импортират и използват в този модул.
exports: Списък с компонентите, директивите и каналите, които се изнасят от този модул и могат да бъдат използвани в други модули.
providers: Списък с доставчици на услуги (services), които са налични в този модул.
bootstrap: Главният компонент, който ще се стартира при стартиране на приложението (само за главният модул).
Ето примерен код за създаване на прост NgModule:

typescript
Copy code
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
Save to grepper
Този пример декларира главният компонент AppComponent в главния модул AppModule и използва BrowserModule, който предоставя необходимите сервизи за работа с браузъра.




В Angular, маршрутизацията е процесът на навигация между различните компоненти и изгледи на единична страница (SPA) приложение.
 Angular предоставя модул за маршрутизация, наречен RouterModule, който позволява дефиниране на маршрути за приложението ви.

Ето някои от основните концепции за маршрутизация в Angular:

Рутинг конфигурация: Това е процесът на дефиниране на маршрутите за приложението ви. Маршрутите се дефинират чрез Routes масив, 
където всеки маршрут съдържа път, към който трябва да съвпадне URL адреса, и компонентът, който трябва да се зареди, 
когато този маршрут се активира.

Router Outlet: RouterOutlet е директива, която служи като място за вмъкване на компонентите на маршрута. 
Когато маршрутът се промени, компонентът, свързан с новия маршрут, се рендира в RouterOutlet.

Router Links: RouterLink е директива, която служи за създаване на хипервръзки, 
които променят URL адреса в съответствие с маршрута, който трябва да се активира.

Маршрут параметри: Angular позволява дефинирането на динамични маршрути, които могат да имат параметри в URL адреса.
 Тези параметри могат да бъдат извлечени и използвани в компонентите, свързани с маршрута, чрез ActivatedRoute сервиза.

Ето примерен код за базова маршрутизация в Angular:

typescript
Copy code
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './home.component';
import { AboutComponent } from './about.component';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'about', component: AboutComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
Save to grepper
В този пример, имаме два маршрута - единият е за началната страница (HomeComponent),
 който съответства на празния път, и вторият е за страницата за "About" (AboutComponent),
  който съответства на пътя 'about'. Тези маршрути са дефинирани в AppRoutingModule,
   който се импортира в главния модул на приложението.




Единичната страница (SPA) е вид уеб приложение, което зарежда една HTML страница и динамично променя съдържанието си, 
без да се зарежда нова страница от сървъра. Това се постига чрез AJAX заявки към сървъра, 
когато потребителят взаимодейства с приложението.

Ето някои от основните характеристики на SPA:

Динамично зареждане на съдържание: SPA приложенията използват JavaScript за динамичното зареждане на съдържание, 
като рендират нови компоненти и изгледи в отговор на действията на потребителя.

Рутинг и навигация: SPA използват маршрутизация, за да управляват навигацията на потребителите в приложението, 
като позволяват на потребителите да преминават между различни части на приложението без да се зареждат нови HTML страници.

Асинхронна комуникация със сървъра: SPA приложенията използват AJAX заявки към сървъра, 
за да обменят данни без да се зарежда цялата страница. 
Това позволява на приложението да работи по-плавно и да предоставя по-бързо потребителско изживяване.

Модулна архитектура: SPA приложенията често използват модулна архитектура,
 където функционалността е разделена на отделни модули или компоненти, 
 които се зареждат динамично според нуждите на потребителя.

Кеширане на данни и състояние на клиента: Поради характеристиките на SPA,
 данните могат да се кешират локално на клиента,
  което може да подобри производителността и бързодействието на приложението.

Angular е един от популярните инструменти за създаване на SPA приложения, 
като предоставя мощен фреймуърк за разработка на модерни уеб приложения, 
които работят като единична страница. С Angular можете да създавате динамични и мащабируеми приложения,
 които се зареждат бързо и предоставят отлично потребителско изживяване.





 RouterModule в Angular е модул, който предоставя възможност за маршрутизация в едностранични приложения (SPA). 
 Този модул предоставя инструменти за конфигуриране на маршрути, навигация между различни компоненти и управление на URL адресите в приложението.

Ето някои от основните функции на RouterModule и как да ги използвате:

Настройка на маршрути: За да използвате RouterModule, трябва да го импортирате в модула на вашето приложение и да конфигурирате маршрутите си. 
Това се прави чрез дефиниране на масив от обекти Routes, където всеки обект представлява маршрут с път и компонент, свързан с него.

Router Links: За да създадете хипервръзки за навигация в приложението си, можете да използвате директивата routerLink. 
Тази директива взема пътя към маршрута и автоматично генерира правилния URL адрес при рендиране на шаблона.

Пренасочвания (Redirects): Можете да дефинирате пренасочвания от един маршрут към друг, когато потребителят въведе определен път. 
Това се прави чрез дефиниране на обект redirectTo в маршрутната конфигурация.

Параметри на маршрут: Angular позволява дефинирането на параметри в URL адреса, които могат да бъдат използвани в компонентите на вашето приложение. 
Тези параметри могат да бъдат извлечени чрез ActivatedRoute сервиза.

Ето примерен код за използване на RouterModule в Angular:

typescript
Copy code
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './home.component';
import { AboutComponent } from './about.component';
import { ContactComponent } from './contact.component';

const routes: Routes = [
  { path: '', redirectTo: '/home', pathMatch: 'full' }, // Redirect to the home page if the URL is empty
  { path: 'home', component: HomeComponent },
  { path: 'about', component: AboutComponent },
  { path: 'contact/:id', component: ContactComponent } // Example with route parameters
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
Save to grepper
Тук се дефинират няколко маршрута, включително пренасочване от празен път към началната страница (HomeComponent), 
както и пример с параметризиран маршрут (ContactComponent), където :id е параметър в URL адреса.




