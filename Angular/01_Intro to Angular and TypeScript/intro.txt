Install globally via npm
*npm install -g @angular/cli
*ng version

▪ Create new project
*ng new some-app
*cd some-app 

▪ Start a dev server on port 4200
*ng serve


TypeScript
*npm install -g typescript
*tsc myfile.ts

https://www.typescriptlang.org/
https://jsonplaceholder.typicode.com/

HTTP (Hypertext Transfer Protocol) и HTTPS (Hypertext Transfer Protocol Secure) са протоколи за комуникация между уеб 
сървъри и клиентски уеб браузъри като Chrome, Firefox или Safari.

HTTP (Hypertext Transfer Protocol): Това е основният протокол за пренос на данни в уеб. С помощта на HTTP, уеб сървъри 
предоставят уеб страници и други ресурси на клиентските браузъри. Тази комуникация обикновено се осъществява чрез TCP/IP 
(Transmission Control Protocol/Internet Protocol). HTTP е също така основата на координирането на комуникацията между уеб 
сървър и клиент.

HTTPS (Hypertext Transfer Protocol Secure): Той е сигурната версия на HTTP. HTTPS използва SSL (Secure Sockets Layer) 
или TLS (Transport Layer Security) протоколи, които криптират данните между клиента и сървъра. Това предпазва данните от
 злонамерени атаки като откриване на данни или манипулация на данни. HTTPS се използва за осигуряване на поверителност и 
 цялостност на данните, които се предават между уеб сървъра и клиента, особено във финансови транзакции, логин страници, 
 онлайн магазини и други уеб приложения, където е важно да се предпазят личните и финансови данни на потребителите.



"OSI модел" се отнася до Open Systems Interconnection model, което е концептуален модел, използван за описание на комуникационните
 процеси, които се случват в компютърни мрежи. Този модел е разработен от Международната организация по стандартизация (ISO) като 
 референтен модел за стандартизацията на мрежовите комуникации.

OSI моделът се състои от седем слоя, като всеки слой изпълнява определена функция при комуникацията между два устройства в мрежата. 
Ето кратко описание на всяка от тези седем слоя:

Физически слой (Physical Layer): Този слой дефинира хардуерните аспекти на мрежовата комуникация, като електрическите, оптичните и 
безжичните сигнали, както и методите за предаване на данни.

Слой на канала за данни (Data Link Layer): Тук се осъществява преносът на данни между съседни устройства в мрежата. Този слой се 
грижи за доставката на данни, адресацията и контрола на грешките.

Мрежов слой (Network Layer): Този слой се грижи за маршрутизацията на данни в мрежата, определянето на най-добрия път за пренасочване
 и управлението на мрежовите устройства като рутери.

Транспортен слой (Transport Layer): Този слой осигурява сигурен и надежден транспорт на данни между различни устройства. Той разделя 
големи потоци от данни на по-малки сегменти и управлява потока на данни, осигурявайки доставка и потвърждение за тях.

Сесийни слой (Session Layer): Този слой управлява сесиите или връзките между устройствата в мрежата, като осигурява начало, край и 
синхронизация на комуникационните сесии.

Представителен слой (Presentation Layer): Този слой се грижи за форматирането и представянето на данните, които се обменят между
 устройствата, като се гарантира съвместимост и разбираемост на данните.

Приложен слой (Application Layer): Този слой предоставя интерфейса между потребителските приложения и мрежата, като се грижи за 
обработката на различни мрежови услуги и протоколи като HTTP, FTP, SMTP и други.

OSI моделът помага за стандартизиране на комуникационните процеси в компютърните мрежи, като разделя функциите и отговорностите на 
различни слоеве, което улеснява разработката, имплементацията и отстраняването на проблеми в мрежовите системи.



CRUD е акроним, който се използва в софтуерното инженерство и базите данни и означава "Create, Read, Update, Delete". Това са 
основните операции, които могат да бъдат изпълнявани върху данни в система:

Create (Създаване): Операцията за създаване позволява на потребителя да въведе нови данни в системата. Това може да бъде създаване
 на нов запис в база данни, създаване на нов файл или създаване на нов обект в програма.

Read (Четене): Операцията за четене позволява на потребителя да извлича информация от системата. Това може да бъде четене на
 съдържанието на база данни, четене на съдържанието на файл или четене на стойностите на обекти в програма.

Update (Актуализиране): Операцията за актуализиране позволява на потребителя да променя съществуващите данни в системата. 
Това може да бъде промяна на стойностите на полета в база данни, промяна на съдържанието на файл или промяна на свойствата на 
обекти в програма.

Delete (Изтриване): Операцията за изтриване позволява на потребителя да премахне съществуващи данни от системата.
 Това може да бъде изтриване на записи от база данни, изтриване на файлове или изтриване на обекти в програма.

CRUD операциите са от основно значение при разработката на софтуерни приложения и системи, тъй като представляват основните 
 начини за манипулиране на данни и осигуряват функционалността за управление на информацията.



Routing overview и навигацията за едностранични приложения (Single Page Applications - SPA) са свързани с начина, по който уеб 
приложението рутва (определя пътя на потребителя в приложението) и осигурява навигация между различните изгледи или компоненти
 без да се налага презареждане на цялата страница.

Едностраничните приложения са уеб приложения, които зареждат единична HTML страница и динамично променят съдържанието чрез JavaScript,
 обикновено с използването на AJAX заявки към сървъра. Това позволява на потребителите да изпитват по-бързо и по-плавно преживяване, 
 тъй като няма прекъсвания в потока на работата при презареждане на цялата страница.

Рутингът в едностраничните приложения се осъществява обикновено чрез библиотеки или фреймуърки за управление на маршрутизацията като 
React Router за React, Vue Router за Vue.js и Angular Router за Angular.

Ето някои основни принципи и термини свързани с рутинга и навигацията в едностраничните приложения:

Маршрути (Routes): Маршрутите дефинират пътища в приложението, които са асоциирани с определени изгледи или компоненти. Например,
 "/home", "/about", "/products".

Компоненти за рутиране (Routing Components): Това са компоненти, които се рендират в зависимост от текущия маршрут. Те съдържат 
логика за показване на правилните изгледи или компоненти за съответния маршрут.

История на прегледа (History): Историята на прегледа позволява на приложението да записва и управлява навигацията на потребителя, 
включително бутоните "назад" и "напред" в браузъра.

Линкове (Links): Линковете са HTML елементи, които позволяват на потребителите да преминават от един изглед към друг, без да се
 налага презареждане на страницата. Те се използват за навигация между различните маршрути.

Вложени маршрути (Nested Routes): Вложените маршрути позволяват на приложението да има йерархия от маршрути. Например, "/products" 
може да бъде вложен в "/admin", така че да се изисква аутентикация за достъп до тези страници.

Guarding Routes (Route Guards): Маршрутните стражи се използват, за да се контролира достъпът до определени маршрути в зависимост 
от определени условия, като например аутентикацията на потребителя.

Рутингът и навигацията са от съществено значение за едностраничните приложения, тъй като те предоставят потребителите сеамлесно
 преживяване при използването на приложението, като им позволяват да се движат лесно между различните секции и функционалности.




Angular е платформа и фреймуърк за разработка на уеб приложения, разработена от екипа на Google. Тя предоставя набор от инструменти 
и библиотеки за създаване на модерни и динамични едностранични приложения (SPA), които работят в уеб браузърите. Вотът е основан на
 TypeScript и предлага широк набор от функционалности, включително компонентно базирана архитектура, маршрутизация, управление на 
 състоянието, валидация на форми и интеграция със сторонни библиотеки.

Ето някои от основните характеристики на Angular:

Компонентна архитектура: Angular промовира компонентна архитектура, която разделя уеб приложението на малки и самодостатъчни 
компоненти. Тези компоненти са строителните блокове на приложението и могат да бъдат вложени един в друг.

Шаблони и директиви: Angular използва шаблони и директиви за динамично генериране на HTML. Това позволява на разработчиците да
 създават интерактивни и динамични потребителски интерфейси с минимално количество код.

Dependency Injection (DI): Angular включва вградена поддръжка за Dependency Injection, което улеснява инжектирането на зависимости 
и поддържа модуларността на приложението.

Рутинг и навигация: Angular предлага вграден модул за маршрутизация, който позволява на разработчиците да дефинират различни маршрути
 и да управляват навигацията в приложението.

HTTP клиент: Angular предоставя вграден HTTP клиент за изпращане на HTTP заявки към уеб сървъри. Това улеснява взаимодействието с
 външни API и заявки към сървърната част на приложението.

Форми и валидация: Angular предоставя мощни инструменти за създаване и валидация на форми. Това включва вградени механизми за 
валидация, като например вградена валидация на форми и кастомни валидатори.

State management: Angular предоставя възможности за управление на състоянието на приложението чрез механизми като Observables и RxJS.
 Това улеснява управлението на данните и състоянието на приложението в реално време.

Angular е мощен инструмент за разработка на уеб приложения, който се използва широко в индустрията за създаване на модерни и 
мащабируеми приложения.





TypeScript е език за програмиране, който е супермножество на JavaScript, което означава, че включва всички основни функции на 
JavaScript и добавя допълнителни функции и типове към езика. TypeScript е разработен и поддържан от Microsoft и се използва широко 
в уеб разработката, особено при проекти, които изискват по-голяма стабилност, мащабируемост и поддръжка на големи проекти.

Ето някои от основните характеристики на TypeScript:

Статични типове: TypeScript добавя статична типизация към JavaScript, което означава, че може да се декларират типове за променливи,
 параметри на функции, върнати стойности и др. Това помага да се намали броят на грешките по време на компилацията и да се подобри
  производителността и надеждността на кода.

Класове и интерфейси: TypeScript поддържа обектно-ориентирано програмиране чрез деклариране на класове, интерфейси, наследяване и
 други концепции, които са известни в езици като Java или C#.

Поддръжка на нови функционалности на ECMAScript: TypeScript обикновено включва поддръжка за новите функционалности на ECMAScript 
(стандартът, върху който е базиран JavaScript), като например стрелкови функции, async/await и др. Това позволява на разработчиците 
да използват последните езикови функции без да се налага да чакат на браузърната поддръжка.

Напреднали инструменти за разработка: TypeScript идва с набор от напреднали инструменти за разработка, като например автоматично 
завършване на кода, навигация на кода, анализ на кода и др. Тези инструменти помагат на разработчиците да пишат по-качествен и 
ефективен код.

Съвместимост с JavaScript: TypeScript е съвместим със стандартния JavaScript код, което означава, че можете да използвате съществуващ
 JavaScript код във вашите TypeScript проекти без проблеми. Това прави миграцията от JavaScript към TypeScript постепенна и лесна.

Компилиране в JavaScript: TypeScript кодът се компилира във валиден JavaScript код, който може да се изпълнява във всеки съвременен 
уеб браузър или сървърна среда. Това означава, че може да използвате TypeScript във вашите проекти без проблеми със съвместимостта.

Това са само някои от основните характеристики на TypeScript, които го правят мощен език за програмиране, особено за големи и 
мащабируеми проекти.



В контекста на Angular, компилирането и транспилирането са два различни процеса, които се използват за превръщане на TypeScript 
код във валиден JavaScript код, който може да се изпълнява в уеб браузърите.

Компилиране (Compilation) в Angular се отнася до процеса на превръщане на TypeScript код и шаблони на Angular във валиден JavaScript
 код. Приложението се компилира преди да бъде пуснато в уеб браузър. Компилирането включва следните стъпки:

Превръщане на TypeScript кода във валиден JavaScript код.
Превръщане на Angular шаблоните във валиден JavaScript код, който създава виртуално дърво на компонентите.
Транспилиране (Transpilation) в Angular се отнася до процеса на превръщане на TypeScript код във валиден JavaScript код (често на 
по-стара версия на ECMAScript, която е по-добре поддържана от уеб браузърите). Транспилирането обикновено се използва за съвместимост
 с по-стари версии на уеб браузърите или за оптимизация на кода. Angular използва инструмента за транспилиране на TypeScript код - 
 TypeScript Compiler (tsc).

Така, като цяло, при разработка на Angular приложения, вие пишете код на TypeScript, който след това се компилира и транспилира във 
валиден JavaScript код, който да бъде изпълнен в уеб браузърите. Това осигурява поддръжка на статичната типизация и напредната
 функционалност на TypeScript, както и съвместимост със стандартния JavaScript.



Модуларността е принцип в софтуерното инженерство, при който програмният код е разделен на по-малки, самостоятелни и преизползваеми 
модули или компоненти. Тези модули обикновено съдържат функционалност, която е логически свързана и изпълнява определена задача.


