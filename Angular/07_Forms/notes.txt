*ng g d highlight


Директиви:
Директивите са специални инструкции в Angular, които променят визуалното поведение на елементите в твоята HTML страница. 
В Angular има два вида директиви: компонентни директиви и атрибутни директиви.

Компонентни директиви са тези, които добавят, премахват или заменят елементи в DOM дървото. Пример за компонентна директива е ngIf, 
която показва или скрива елементи в зависимост от условие:
<div *ngIf="isVisible">Това е видимо, когато isVisible е true</div>

Атрибутни директиви се използват за промяна на изгледа или поведението на елементи, като добавят или премахват атрибути. 
Пример за атрибутна директива е ngClass, която добавя или премахва класове в зависимост от условие:

<div [ngClass]="{ 'highlight': isHighlighted }">Това е подсветено, когато isHighlighted е true</div>

Форми:
Формите в Angular се използват за събиране на данни от потребителя. Angular предоставя два вида форми: шаблонни форми и реактивни форми.

Шаблонни форми се дефинират директно в HTML шаблоните. Те се управляват чрез директиви като ngForm и ngModel. Пример за шаблонна форма:

<form #myForm="ngForm" (ngSubmit)="onSubmit(myForm)">
  <input type="text" name="username" ngModel>
  <button type="submit">Изпрати</button>
</form>
Реактивни форми са базирани на програмен подход и използват FormControl, FormGroup и FormBuilder за създаване и управление на формите. 
Пример за реактивна форма:

import { Component } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-my-form',
  template: `
    <form [formGroup]="myForm" (ngSubmit)="onSubmit()">
      <input type="text" formControlName="username">
      <button type="submit">Изпрати</button>
    </form>
  `
})
export class MyFormComponent {
  myForm: FormGroup;

  constructor(private fb: FormBuilder) {
    this.myForm = this.fb.group({
      username: ''
    });
  }

  onSubmit() {
    console.log(this.myForm.value);
  }
}
Това са основните неща свързани с директивите и формите в Angular. Ако имаш допълнителни въпроси, не се колебай да попиташ.



Когато говорим за директиви в Angular, обикновено разглеждаме два основни типа: компонентни директиви и атрибутни директиви. 
Нека сравним тези два типа по няколко аспекта:

Компонентни директиви:
Създаване и управление:

Създаване: Компонентните директиви се създават като отделни компоненти в Angular, които имат свой собствен шаблон и логика.
Управление: Те могат да бъдат добавяни, премахвани или заменяни в DOM дървото на основата на условия или динамични данни.
Пример:

Пример за компонентна директива е ngIf, която добавя или премахва елементи в DOM в зависимост от условие.
html
Copy code
<div *ngIf="isVisible">Това е видимо, когато isVisible е true</div>
Save to grepper
Атрибутни директиви:
Създаване и управление:

Създаване: Атрибутните директиви се свързват към HTML елементи като атрибути, които променят техните свойства или поведение.
Управление: Те могат да променят атрибути, класове, стилове и други свойства на елементите.
Пример:

Пример за атрибутна директива е ngClass, която добавя или премахва класове от елемент в зависимост от условие.
html
Copy code
<div [ngClass]="{ 'highlight': isHighlighted }">Това е подсветено, когато isHighlighted е true</div>
Save to grepper
Сравнение:
Сложност на употреба: Компонентните директиви са по-сложни за създаване поради нуждата от създаване на отделен компонент, 
докато атрибутните директиви са по-лесни и бързи за добавяне към съществуващи елементи.
Гъвкавост: Компонентните директиви са по-гъвкави и могат да представят по-сложна логика и изглед, 
докато атрибутните директиви се използват предимно за манипулиране на прости атрибути или стилове на елементи.
Изборът между компонентни и атрибутни директиви зависи от конкретните изисквания на проекта и сложността на визуалния ефект или логиката,
 която искате да постигнете.




Да създадем проста атрибутна директива в Angular. Ще създадем директива, която променя цвета на текста на елемента, към който е прикачена.

Първо трябва да създадем директивата с Angular CLI. Можем да използваме следната команда:

bash
Copy code
ng generate directive colorChange
Save to grepper
Това ще създаде файл color-change.directive.ts в директорията на нашия проект. Сега можем да дефинираме логиката на нашата директива.

typescript
Copy code
import { Directive, ElementRef, Renderer2, HostListener } from '@angular/core';

@Directive({
  selector: '[appColorChange]'
})
export class ColorChangeDirective {

  constructor(private el: ElementRef, private renderer: Renderer2) { }

  @HostListener('mouseenter') onMouseEnter() {
    this.changeColor('red');
  }

  @HostListener('mouseleave') onMouseLeave() {
    this.changeColor(null);
  }

  private changeColor(color: string) {
    this.renderer.setStyle(this.el.nativeElement, 'color', color);
  }
}
Save to grepper
Тук сме дефинирали директивата ColorChangeDirective. Използваме Renderer2, за да променяме стиловете на елемента, към който е прикачена директивата.

@HostListener декораторите ни позволяват да слушаме за събития на домакинския елемент, към който е прикачена директивата. 
В този случай, когато мишката влезе в елемента (mouseenter) или излиза от него (mouseleave), променяме цвета на текста на елемента.

След това можем да използваме нашата директива в HTML шаблоните:

html
Copy code
<p appColorChange>Текст, който ще промени цвета си, когато се наведете върху него.</p>
Save to grepper
Сега, когато поставим тази директива върху елемент в нашата HTML страница, цветът на текста ще се промени в червен,
 когато посетителят наведе мишката върху него, и ще се върне към първоначалния цвят при излизане.




Renderer2 е сервиз в Angular, предоставен от Angular Core, който се използва за манипулиране на DOM елементи.
 Той предлага абстракция върху DOM, която позволява безопасно манипулиране на DOM, 
 независимо от средата на изпълнение (като например браузър или сървър).

Един от най-важните аспекти на Renderer2 е, че той предоставя безопасен начин за манипулиране на DOM, 
който осигурява съвместимост с различни среди и по-висока сигурност. 
Това става посредством абстракция на ниско ниво на DOM операции като createElement, setAttribute, appendChild и други.

Важно е да се отбележи, че Renderer2 се препоръчва да се използва вместо директен достъп до DOM API, 
особено когато приложението ви трябва да бъде съвместимо с различни браузъри или ако работите в среди като Angular Universal, 
където няма пряк достъп до DOM.

Ето някои от най-често използваните методи на Renderer2:

createElement(name: string, namespace?: string | null): Създава нов елемент с дадено име и пространство на имена.
setAttribute(el: any, name: string, value: string, namespace?: string | null): Задава стойност на атрибут на даден елемент.
addClass(el: any, name: string): Добавя клас към даден елемент.
removeClass(el: any, name: string): Премахва клас от даден елемент.
appendChild(parent: any, newChild: any): Добавя нов елемент като дете на даден родителски елемент.
Тези методи предоставят безопасен начин за манипулиране на DOM елементи и се препоръчват за употреба в Angular приложения.

